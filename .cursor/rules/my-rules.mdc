---
description: 开发规范
globs: 
---

# Your rule content
你是一个经验丰富的老程序员 拥有10年开发经验请严格遵守项目规范
# 项目开发规范文档

## 1. 代码风格规范

### 1.1 Vue 组件规范

#### 命名规范
- 组件名使用 PascalCase 格式
- 基础组件以 Base 开头
- 单例组件以 The 开头
- 紧密耦合的组件名用父组件名作为前缀

-正确示例
  BaseButton.vue
TheHeader.vue
TodoList.vue
TodoListItem.vue
 
#### 组件结构
vue
<template>
<!-- template 内容 -->
</template>
<script setup lang="ts">
// imports
// props & emits
// 响应式数据
// 计算属性
// 方法
// 生命周期钩子
</script>
<style scoped lang="scss">
// 样式代码
</style>

### 1.2 TypeScript 规范

- 必须显式声明变量类型
- 优先使用 interface 而不是 type
- 使用 type 做联合类型或工具类型
- 枚举类型使用 enum 关键字

### 1.3 CSS/SCSS 规范

- 使用 BEM 命名规范
- 优先使用 class 而非 id
- 避免使用 !important
- 使用 SCSS 嵌套不超过 3 层

## 2. 项目结构规范

### 2.1 目录结构
src/
├── api/ # API 接口定义
│ ├── modules/ # 按模块划分的接口
│ └── types/ # 接口类型定义
├── assets/ # 静态资源
├── components/ # 公共组件
│ ├── base/ # 基础组件
│ └── business/ # 业务组件
├── hooks/ # 组合式函数
├── layouts/ # 布局组件
├── router/ # 路由配置
├── stores/ # 状态管理
├── styles/ # 全局样式
├── types/ # TS 类型定义
├── utils/ # 工具函数
└── views/ # 页面组件

### 2.2 文件命名规范
- 组件文件：PascalCase.vue
- 工具函数：camelCase.ts
- 类型定义：PascalCase.type.ts
- 样式文件：kebab-case.scss

## 3. Git 提交规范

### 3.1 分支管理
- main: 主分支，用于生产环境
- develop: 开发分支
- feature/*: 功能分支
- hotfix/*: 紧急修复分支
- release/*: 发布分支

### 3.2 提交信息格式
#### type 类型
- feat: 新功能
- fix: Bug修复
- docs: 文档更新
- style: 代码格式调整
- refactor: 重构代码
- test: 测试相关
- chore: 构建过程或辅助工具的变动

#### scope 范围
- core: 核心模块
- component: 组件相关
- utils: 工具函数
- deps: 依赖相关
- config: 配置相关

## 4. 编码最佳实践

### 4.1 Vue 最佳实践
- 优先使用 composition API
- 及时释放组件中的事件监听器
- 合理使用 computed 和 watch
- 避免在模板中使用复杂的表达式

### 4.2 性能优化
- 路由懒加载
- 组件按需引入
- 大型列表使用虚拟滚动
- 合理使用缓存机制
- 图片懒加载

### 4.3 安全实践
- 防止 XSS 攻击
- 避免在前端存储敏感信息
- API 请求添加适当的超时处理
- 敏感操作添加确认机制

## 5. 测试规范

### 5.1 单元测试
- 必须为工具函数编写测试
- 必须为公共组件编写测试
- 测试覆盖率要求达到 80% 以上

### 5.2 E2E测试
- 核心业务流程必须编写 E2E 测试
- 提交前确保所有测试通过

## 6. 文档规范

### 6.1 注释规范
/
函数描述
@param {string} param1 - 参数1的描述
@param {number} param2 - 参数2的描述
@returns {boolean} 返回值描述
/
### 6.2 README 规范
- 项目描述
- 安装步骤
- 开发指南
- 部署说明
- 常见问题

## 7. 发布规范

### 7.1 版本号规范
遵循 Semantic Versioning 2.0.0
- 主版本号：不兼容的 API 修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

### 7.2 发布流程
1. 更新版本号
2. 更新 CHANGELOG
3. 执行测试
4. 构建产物
5. 发布

## 8. 项目配置规范

### 8.1 环境变量
.env # 所有环境
.env.development # 开发环境
.env.production # 生产环境
.env.test # 测试环境

### 8.2 构建配置
- 合理配置 chunk 分割
- 启用 gzip/brotli 压缩
- 配置 CDN 加速
- 优化构建速度

## 9. 代码审查清单

### 9.1 提交前检查
- 代码格式化是否规范
- 是否编写/更新测试
- 是否编写/更新文档
- 是否处理了所有 TODO 注释
- 是否移除了调试代码

### 9.2 审查重点
- 代码可读性
- 性能影响
- 安全隐患
- 兼容性问题
- 业务逻辑正确性
I